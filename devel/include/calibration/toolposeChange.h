// Generated by gencpp from file calibration/toolposeChange.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MESSAGE_TOOLPOSECHANGE_H
#define CALIBRATION_MESSAGE_TOOLPOSECHANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calibration
{
template <class ContainerAllocator>
struct toolposeChange_
{
  typedef toolposeChange_<ContainerAllocator> Type;

  toolposeChange_()
    : pose_change()  {
      pose_change.assign(0.0);
  }
  toolposeChange_(const ContainerAllocator& _alloc)
    : pose_change()  {
  (void)_alloc;
      pose_change.assign(0.0);
  }



   typedef boost::array<double, 16>  _pose_change_type;
  _pose_change_type pose_change;





  typedef boost::shared_ptr< ::calibration::toolposeChange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration::toolposeChange_<ContainerAllocator> const> ConstPtr;

}; // struct toolposeChange_

typedef ::calibration::toolposeChange_<std::allocator<void> > toolposeChange;

typedef boost::shared_ptr< ::calibration::toolposeChange > toolposeChangePtr;
typedef boost::shared_ptr< ::calibration::toolposeChange const> toolposeChangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration::toolposeChange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration::toolposeChange_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace calibration

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'calibration': ['/home/zhsyi/calibration/src/tracking_grab/calibration/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::calibration::toolposeChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration::toolposeChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration::toolposeChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration::toolposeChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration::toolposeChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration::toolposeChange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration::toolposeChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d7e0e3659cf63858575545bebf33aef";
  }

  static const char* value(const ::calibration::toolposeChange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d7e0e3659cf6385ULL;
  static const uint64_t static_value2 = 0x8575545bebf33aefULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration::toolposeChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration/toolposeChange";
  }

  static const char* value(const ::calibration::toolposeChange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration::toolposeChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[16] pose_change\n\
";
  }

  static const char* value(const ::calibration::toolposeChange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration::toolposeChange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_change);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct toolposeChange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration::toolposeChange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration::toolposeChange_<ContainerAllocator>& v)
  {
    s << indent << "pose_change[]" << std::endl;
    for (size_t i = 0; i < v.pose_change.size(); ++i)
    {
      s << indent << "  pose_change[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pose_change[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MESSAGE_TOOLPOSECHANGE_H
